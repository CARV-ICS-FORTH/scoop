/*
 *  fixedgrid.sq
 *  fixedgrid sequoia
 *
 *  Jae-Seung Yeom <jyeom@cs.vt.edu>
 *
 *  Computer Science Dept. VirginiaTech
 *
 */


#define NSPEC  1
#define NROWS  600
#define NCOLS  600
#define IS_ROW 2
#define IS_COL 3
#define VECTOR_LENGTH 2
#define NROWSV 300
#define NCOLSV 300

void task discretize_all(in int dims[N4], in double DXYT[DD], in double wind[SZ1][SZ2], in double diff[SZ1][SZ2], inout double conc[SZ0][SZ1][SZ2]);
void task discretize_all_rows(in int dims[N4], in double DXYT[DD], in double wind[SZ1][SZ2], in double diff[SZ1][SZ2], in double concIn[SZ0][SZ1][SZ2], out double concOut[SZ0][SZ1][SZ2]);
void task discretize_all_cols(in int dims[N4], in double DXYT[DD], in double wind[SZ1][SZ2], in double diff[SZ1][SZ2], in double concIn[SZ0][SZ1][SZ2], out double concOut[SZ0][SZ1][SZ2]);

void task<inner> discretize_all::Inner(in int dims[N4], in double DXYT[DD], in double wind[SZ1][SZ2], in double diff[SZ1][SZ2], inout double conc[SZ0][SZ1][SZ2])
{
       int row_or_col = dims[3];

       if (row_or_col == IS_ROW) {
            mapseq (int i=0 : NSPEC) {
                discretize_all_rows(dims[0;4], DXYT[0;2], \
                                    wind[0; NROWS][0; NCOLS], \
                                    diff[0; NROWS][0; NCOLS], \
                                    conc[i; 1][0; NROWS][0; NCOLS], \
                                    conc[i; 1][0; NROWS][0; NCOLS]);
            }
        } else {
            mapseq (int i=0 : NSPEC) {
                discretize_all_cols(dims[0;4], DXYT[0;2], \
                                    wind[0; NCOLS][0; NROWS], \
                                    diff[0; NCOLS][0; NROWS], \
                                    conc[i; 1][0; NROWS][0; NCOLS], \
                                    conc[i; 1][0; NROWS][0; NCOLS]);
            }
        }
}

void task<inner> discretize_all_rows::Inner(in int dims[N4], in double DXYT[DD], in double wind[SZ1][SZ2], in double diff[SZ1][SZ2], in double concIn[SZ0][SZ1][SZ2], out double concOut[SZ0][SZ1][SZ2])
{
        mappar (int j=0 : NROWSV) {
            discretize_all_rows(dims[0;4], DXYT[0;2], \
                                wind[j*VECTOR_LENGTH; VECTOR_LENGTH][0; NCOLS], \
                                diff[j*VECTOR_LENGTH; VECTOR_LENGTH][0; NCOLS], \
                                concIn[0; 1][j*VECTOR_LENGTH; VECTOR_LENGTH][0; NCOLS], \
                                concOut[0; 1][j*VECTOR_LENGTH; VECTOR_LENGTH][0; NCOLS]);
        }
}

void task<inner> discretize_all_cols::Inner(in int dims[N4], in double DXYT[DD], in double wind[SZ1][SZ2], in double diff[SZ1][SZ2], in double concIn[SZ0][SZ1][SZ2], out double concOut[SZ0][SZ1][SZ2])
{
        mappar (int k=0 : NCOLSV) {
            discretize_all_cols(dims[0;4], DXYT[0;2], \
                                wind[0; NROWS][k*VECTOR_LENGTH; VECTOR_LENGTH], \
                                diff[0; NROWS][k*VECTOR_LENGTH; VECTOR_LENGTH], \
                                concIn[0; 1][0; NROWS][k*VECTOR_LENGTH; VECTOR_LENGTH], \
                                concOut[0; 1][0; NROWS][k*VECTOR_LENGTH; VECTOR_LENGTH]);
        }
}

void task<ext> discretize_all_rows::Leaf(in int dims[N4], in double DXYT[DD], \
    in double wind[SZ1][SZ2], in double diff[SZ1][SZ2], \
    in double concIn[SZ0][SZ1][SZ2], out double concOut[SZ0][SZ1][SZ2]);

void task<ext> discretize_all_cols::Leaf(in int dims[N4], in double DXYT[DD], \
    in double wind[SZ1][SZ2], in double diff[SZ1][SZ2], \
    in double concIn[SZ0][SZ1][SZ2], out double concOut[SZ0][SZ1][SZ2]);

